@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    DateTime localDate = DateTime.Now;

    int index = Model.counter;
    int hour = localDate.Hour;
    string timeMessage = "Good Morning";
    string widgetColor = "#fcd14d";
    if (hour >= 12 && hour < 17) { timeMessage = "Good Afternoon"; widgetColor = "#EF810E"; }
    if (hour >= 17 && hour < 22) { timeMessage = "Good Evening"; widgetColor = "#053752"; }
    if (hour >= 22 && hour < 24) { timeMessage = "Good Night"; widgetColor = "#001A26"; }
    if (hour >= 0 && hour < 6) { timeMessage = "Good Night"; widgetColor = "#001A26"; }

}

@section Head {
    <style>
    body {
        /* The image used */
        background-image: url(@(Model.image.url));
        /* Full height */
        height: 100%;
        /* Center and scale the image nicely */
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    #drag-1, #drag-2, #drag-3 {
        width: 25%;
        min-height: 6.5em;
        margin: 1rem 0 0 1rem;
        background-color: @(widgetColor);
        color: white;
        border-radius: 0.75em;
        padding: 4%;
        touch-action: none;
        user-select: none;
        -webkit-transform: translate(0px, 0px);
        transform: translate(0px, 0px);
    }

    #change-background {
        background-color: @(widgetColor);
        color: white;
    }

    </style>
}


<div class="text-center">
    <div class="widget">
        <div id="drag-1" class="draggable">
            <div class="row weather">
                <div class="col">
                    <h3 id="set-weather"></h3>
                    <p id="set-weather-min"></p>
                    <p id="set-weather-max"></p>
                </div>
                <div class="col">
                    <img id="set-weather-image" />
                    <p id="set-weather-desc"></p>
                    <button id="change-temp-f"></button>
                    <button id="change-temp-c"></button>
                </div>
            </div>
        </div>

        <div id="drag-2" class="draggable">
            <div>
                <div id="quote-content">
                    @Html.Raw(Model.quotes[index].content.rendered)
                </div>
                <h5><i id="title">- @Model.quotes[index].title.rendered</i></h5>
            </div>
            <button id="update-quote">New Quote?</button>
        </div>

        <div id="drag-3" class="draggable">
            <h5><button id="change"></button></h5>
            <h5 id="time"></h5>
            <h5>@(timeMessage)</h5>
        </div>

        <div id="drag-4" class="draggable">
            <button id="change-background" class="btn">New Image?</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
    var dragEvents = (function () {
            function initialize() {
                window.dragMoveListener = dragMoveListener;

                interact('.draggable')
                    .draggable({
                        // enable inertial throwing
                        inertia: true,
                        // keep the element within the area of it's parent
                        modifiers: [
                            interact.modifiers.restrictRect({
                                restriction: 'parent',
                                endOnly: true
                            })
                        ],
                        // enable autoScroll
                        autoScroll: true,

                        listeners: {
                            // call this function on every dragmove event
                            move: dragMoveListener,

                        }
                    })
           }



           function dragMoveListener(event) {
               var target = event.target
               // keep the dragged position in the data-x/data-y attributes
               var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
               var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

               // translate the element
               target.style.webkitTransform =
                   target.style.transform =
                   'translate(' + x + 'px, ' + y + 'px)'

               // update the posiion attributes
               target.setAttribute('data-x', x)
               target.setAttribute('data-y', y)
           }

            return {
                Init: initialize
            }
    })();

    var currentPage = (function () {
        //Global Variables
        var timer;
        var clockFormat;
        var currentQuote = @(index);
        var city;
        var stateID;
        var countryID;
        function initialize() {
                 startClock(0);
                 getLocation("imperial");

                $('#change-background').click(function () {
                    updateBackground();
                });

                $('#change-temp-c').click(function () {
                    updateTemp("metric");
                });

                $('#change-temp-f').click(function () {
                    updateTemp("imperial");
                });

                $('#update-quote').click(function () {
                    changeQuote();
                });

                 $('#change').click(function () {
                     clearInterval(timer);
                     if (clockFormat == 0) {
                         startClock(1);
                     } else {
                         startClock(0);
                     }
                 });
        }

         /* Change Background Image */
        function updateBackground() {
            // Uses the server as a rest api to call my RandomImage function
            $.get("?handler=RandomImage").then(function (d) {
                $("body").css("background-image", "url(" + d.url + ")");
            });
        }

        /* Grab Location For Weather */
        function getLocation(tempType) {
            if (navigator.geolocation) {
                $.ajax({
                    url: "https://geolocation-db.com/jsonp",
                    jsonpCallback: "callback",
                    dataType: "jsonp",
                    success: function (location) {
                        countryID = location.country_code;
                        city = location.city;
                        stateID = "ID";
                        //location.state
                        updateTemp(tempType);
                    }
                });
            } else {
                //Defualts
                countryID = "US";
                stateID = "TX";
                city = "Dallas";
                updateTemp(tempType);
            }
        }

        /* Change Temperature */
        function updateTemp(tempType) {
            // Local Variables
            var iconURL = "https://openweathermap.org/img/wn/";
            var iconType = ".png";

            var symbol = tempType == "imperial" ? symbol = "<span>&#8457;</span>" : symbol = "<span>&#8451;</span>";

            // Uses the server as a rest api to call my ChangeWeather function
            $.get("?handler=ChangeWeather", { city: city, stateID: stateID, countryID: countryID, tempType: tempType }).then(function (d) {
                $("#set-weather").html(d.main.temp.toFixed(0) + symbol);
                $("#set-weather-min").html("Low: " + d.main.temp_min.toFixed(0));
                $("#set-weather-max").html("High: " + d.main.temp_max.toFixed(0));
                $("#set-weather-image").attr("src", iconURL + d.weather[0].icon + iconType);
                $("#set-weather-image").attr("alt", d.weather[0].description);
                $("#set-weather-desc").html(d.weather[0].description);
                $("#change-temp-f").html("<span>&#8457;</span>");
                $("#change-temp-c").html("<span>&#8451;</span>");

            });
         }

        /* Clock Functionality */
        function startClock(format) {
             var d = new Date();
             ap = "am";
             h = d.getHours();
             m = d.getMinutes();
             s = d.getSeconds();
             if (format == 0) {
                 clockFormat = 0;
                 if (h > 11) { ap = "pm"; }
                 if (h > 12) { h = h - 12; }
                 if (h == 0) { h = 12; }
                 if (m < 10) { m = "0" + m; }
                 if (s < 10) { s = "0" + s; }
                 $('#change').html("12 Hour Clock");
                 $('#time').html(h + ":" + m + ":" + s + " " + ap);
             } else {
                 clockFormat = 1;
                 if (m < 10) { m = "0" + m; }
                 if (s < 10) { s = "0" + s; }
                 $('#change').html("Military Time");
                 $('#time').html(h + ":" + m + ":" + s);
             }
             timer = setTimeout(function () {
                 startClock(format);
             }, 500);
         };

        /* Change Quote */
        function changeQuote() {
            // Local Variables
            var quotes = @(Json.Serialize(Model.quotes));
            var quoteLength = @(Model.quotes.Count);

            currentQuote++; // Increment quote index
            currentQuote = currentQuote >= quoteLength ? currentQuote = 0 : currentQuote; //Check quote length
            var quote = quotes[currentQuote];
            $('#quote-content').html(quote.content.rendered);
            $('#title').html(quote.title.rendered);
        };

                return {
                    Init: initialize
                }
     })();

    $(document).ready(function () {
        currentPage.Init();
        dragEvents.Init();
    });
    </script>
}

